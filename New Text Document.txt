 <br><br><br><br><br><br><br><br>
	<h1> Tic T&#127344c T&#127358e</h1>
	<table>
		<tr>
			<td id="0"></td>
			<td id="1"></td>
			<td id="2"></td>
		</tr>
		<tr>
			<td id="3"></td>
			<td id="4"></td>
			<td id="5"></td>
		</tr>
		<tr>
			<td id="6"></td>
			<td id="7"></td>
			<td id="8"></td>
		</tr>
	</table>
	<h1> &#128518 &#10060  &#11093 &#128518 </h1>
	
	
	
	<style>
        body{
			background-image: url('img_girl.jpg');
        }
		table {
			border-collapse:separate;
			margin:auto;
            border: 2px solid rgb(255, 255, 255);
            
		}
		td {
			width: 90px;
			height: 90px;
			text-align: center;
			font-size: 50px;
			font-weight: bold;
			border: 2px solid rgb(255, 255, 255);
			cursor: pointer;
            background-color: white;
		}
		td:hover {
			background-color: lightgray;
		}
        h1{
            color:rgb(52, 52, 231);
            text-align: center;
        }
		h2{
            color:rgb(52, 52, 231);
            text-align: center;
        }
</style>
	</style>
	
	
	
	// Variables to keep track of game state
let gameBoard = ['', '', '', '', '', '', '', '', ''];
let currentPlayer = 'X';
let gameEnded = false;

// Elements from the HTML page
const squares = document.querySelectorAll('td');
const resultMessage = document.querySelector('h2');

// Function to check if a player has won the game
function checkWin(player) {
  if (
    (gameBoard[0] === player && gameBoard[1] === player && gameBoard[2] === player) ||
    (gameBoard[3] === player && gameBoard[4] === player && gameBoard[5] === player) ||
    (gameBoard[6] === player && gameBoard[7] === player && gameBoard[8] === player) ||
    (gameBoard[0] === player && gameBoard[3] === player && gameBoard[6] === player) ||
    (gameBoard[1] === player && gameBoard[4] === player && gameBoard[7] === player) ||
    (gameBoard[2] === player && gameBoard[5] === player && gameBoard[8] === player) ||
    (gameBoard[0] === player && gameBoard[4] === player && gameBoard[8] === player) ||
    (gameBoard[2] === player && gameBoard[4] === player && gameBoard[6] === player)
  ) {
    return true;
  }
  return false;
}

// Function to handle clicks on the game board squares
function handleSquareClick(event) {
  const squareId = event.target.id;
  if (gameBoard[squareId] === '' && !gameEnded) {
    event.target.textContent = currentPlayer;
    gameBoard[squareId] = currentPlayer;
    if (checkWin(currentPlayer)) {
      resultMessage.textContent = `${currentPlayer} wins!`;
      gameEnded = true;
    } else if (!gameBoard.includes('')) {
      resultMessage.textContent = "It's a tie!";
      gameEnded = true;
    } else {
      currentPlayer = currentPlayer === 'X' ? 'O' : 'X';
      resultMessage.textContent = `It's ${currentPlayer}'s turn`;
    }
  }
}

// Add event listeners to the game board squares
squares.forEach((square) => {
  square.addEventListener('click', handleSquareClick);
});

// Reset game board and state when reset button is clicked
const resetButton = document.querySelector('h1');
resetButton.addEventListener('click', () => {
  gameBoard = ['', '', '', '', '', '', '', '', ''];
  currentPlayer = 'X';
  gameEnded = false;
  squares.forEach((square) => {
    square.textContent = '';
  });
  resultMessage.textContent = `It's ${currentPlayer}'s turn`;
});